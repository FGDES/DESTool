<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!DOCTYPE ReferencePage SYSTEM "referencepage.dtd">

<ReferencePage chapter="example" section="none" title="DESTool: Example">


<h1>Example</h1>


<p> 
We give step by step instructions how to investigate 
the simple machine scenario within DESTool.
</p> 

<p> 
Our plant consists of two 
machines <em>MachineA</em> and <em>MachineB</em>, that process 
one workpiece at a time. <em>MachineA</em> on command takes a workpiece form
an unlimited source, processes it, and then drops in
into the buffer <em>BufferAB</em>, which can hold one workpiece.
<em>MachineB</em> on command fetches a workpiece 
from the <em>BufferAB</em>, processes it, and delivers it to 
an unlimited sink. Both machines may fail in processing the
workpiece. In this case, the workpiece will be removed
and the machine needs to be repaired. The goal is to synthesise
a supervisor that controls both machines to prevent a buffer overflow.
</p> 



<h3>Machines Project</h3>

<p>
To prepare a DESTool project, first create an empty folder (e.g. ~/Machines).
Then start DESTool, and use <em>Save</em> from the <em>File</em> menu to
save the empty project to a project file inside the newly created folder
(e.g. ~/Machines/Machines.pro).
</p>

<h3>Plant Components</h3>

<p> 
The two machines are formally considered as the plant, referring to the
events
</p> 
<ul>
<li class="l1">
<tt>alpha_a</tt>, <tt>alpha_b</tt>: machine A/B to take a workpiece 
</li>
<li class="l1">
<tt>beta_a</tt>, <tt>beta_b</tt>: machine A/B to complete processing a workpiece 
</li>
<li class="l1">
<tt>mue_a</tt>, <tt>mue_b</tt>: machine A/B to fail
</li>
<li class="l1">
<tt>lambda_a</tt>, <tt>lambda_b</tt>: machine A/B to be repaired
</li>
</ul>


<p>
To create one variable of faudes-type <em>System</em> for each machine, 
you may use the <em>Variables</em> tab of the project browser:
</p>
<ol>
<li>
use <em>New Variable</em> from the <em>File></em> menu to create a new variable;
</li>
<li>
inspect the properties section to ensure the type is <em>System</em> and 
to set the variable name to <em>MachineA</em>;
</li>
<li>
</li> make sure that the variable is tagged <em>Persistent</em>, <em>Plant Model</em>
and <em>Visual Representation</em>.
</ol>

<p>
<img class="screen" src="images/destool_gimp_variablesab.png"></img>
</p>


<p>
To show the variables value in a window, use the context menu of in the variable list.
You can now graphically enter the plant variable. Use the <tt>Shift</tt> key to
insert states and transitions, use the context menu to edit
state and event attributes (e.g. names and controllability flags).
</p>


<p>
<img class="screen" src="images/destool_gimp_machinea.png"></img>
<img class="screen" src="images/destool_gimp_machineb.png"></img>
</p>




<h3>Specification</h3>

<p>
For the closed loop specification, we model the buffer
with a capacity of one workpiece, i.e. the buffer is either
empty for full. The screen-shot shows both, the list view and the graphics view
on the specification generator <em>BufferAB</em>.
</p>

<p>
We also need a variable of type <em>EventSet</em> to store the over all 
alphabet.
</p>


<p>
<img class="screen" src="images/destool_gimp_bufferab.png"></img>
&nbsp
&nbsp
&nbsp
&nbsp
<img class="screen" src="images/destool_gimp_sigma.png"></img>
</p>


<h3>Synthesis Script</h3>

<p>
Synthesis consists of three steps. First we compose the two plant components
<em>MachineA</em> and <em>MachineB</em> to an overall plant model
<em>PlantAB</em>. Next, we use the inverse projection to add self-loops
to the specification. Third, we compute the least restrictive supervisor
that enforces the specification <em>BufferAB</em> for <em>PlantAB</em>.
</p>

<p>
You may use the <em>Script</em> tab from the project browser to
set up an according script:
</p>
<ol>
<li><p>
introduce three operations <em>Parallel</em>, <em>InvProject</em> and <em>SupConNB</em>
by selecting them from the <em>Insert Operation</em> button;
the operations will be coloured red to indicate that no operand or result variables 
have been assigned; 
</p></li>
<li><p>
in <em>Parallel</em>, set the operands to <em>MachineA</em>
and <em>MachineB</em>; for the result, enter a new variable name <em>PlantAB</em>;
observe green to indicate that this operation is ready to be performed; however, the
default type is <em>Generator</em>, and does not maintain controllability attributes;
therefore, you should use the context menu to change the type to <em>System</em>;
</p>
<p><img class="screen" src="images/destool_gimp_parallel.png"></img></p>
</li>
<li><p>
in <em>InvProject</em>, choose the signature with three arguments, and set them to
<em>BufferAB</em>, <em>Sigma</em> and <em>FullBufferAB</em>, respectively; the
specification does not require event attributes, and, hence, type <em>Generator</em>
is fine; 
</p>
<p><img class="screen" src="images/destool_gimp_oproject.png"></img></p>
</li>
<li>
<p>
in <em>SupConNB</em> set the arguments to 
<em>PlantAB</em>, <em>FullBufferAB</em> and <em>SuperAB</em>, respectively.
</p>
<p><img class="screen" src="images/destool_gimp_osupcon.png"></img></p>
</li>
</ol>



<p>
To run the script, use the <em>Exec.</em> button below. 
Observe that all operations turn grey to indicate successful completion.
</p>

<p>
To inspect the resulting supervisor, you may use the context menu of the 
result variable in the synthesis operation. Note that the supervisor
will be shown as list view by default. To automatically generate a graphics
view, adjust the vertical splitter and click <em>Generate via dot</em>. This requires
the Graphviz package to be installed.
</p>

<p>
<img class="screen" src="images/destool_gimp_superab1.png"></img>
</p>
<p>
<img class="screen" src="images/destool_gimp_superab2.png"></img>
</p>

<p>
In order to save your supervisor to separate file, choose <em>External File</em> from the
variable context menu.
</p>


</ReferencePage>
